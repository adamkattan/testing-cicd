name: Create tag

# Execute this workflow after merging to *main*
on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  create-tag:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Install SSH Client
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GIT_TOKEN }}
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create tag
        run: |
          push_tag() {
            local tag_to_push=$1
            git tag "$tag_to_push" || { echo "Failed to create tag $tag_to_push"; exit 1; }
            git push origin "$tag_to_push" || { echo "Failed to push tag $tag_to_push"; exit 1; }
            echo "tag: $tag_to_push was pushed successfully."
          }
          retag_major() {
            local pushed_tag_major_version=$1

            git tag -d "$pushed_tag_major_version" || { echo "Failed to delete tag $pushed_tag_major_version"; exit 1; }
            git push origin --delete "$pushed_tag_major_version" || { echo "Failed to push delete for tag $pushed_tag_major_version"; exit 1; }
            echo "tag: $tag_to_push was pushed_tag_major_version successfully."

            push_tag $pushed_tag_major_version
          }

          label=$(echo '${{ toJson(github.event.pull_request.labels) }}' | jq -r '.[0].name')

          echo "Triggering actor - ${{ github.triggering_actor }}"
          echo "Labels: $label"

          # this will get the latest_tag
          latest_tag=$(git tag | sort -Vr | head -n 1)
          echo "latest tag: $latest_tag"
          
          latest_tag="${latest_tag#v}"
          IFS='.' read -r major_slice minor_slice patch_slice <<< "$latest_tag"

          # Set default values if any part is missing
          major_slice=${major_slice:-0}
          minor_slice=${minor_slice:-0}
          patch_slice=${patch_slice:-0}
          echo "slices: $major_slice.$minor_slice.$patch_slice"

          echo "slices: $major_slice.$minor_slice.$patch_slice"

          case $label in
            patch)
              new_tag="v$major_slice.$minor_slice.$((patch_slice + 1))"
              push_tag $new_tag
              retag_major "v$major_slice"
              ;;
            minor)
              new_tag="v$major_slice.$((minor_slice + 1)).0"
              push_tag $new_tag
              retag_major "v$major_slice"
              ;;
            major)
              new_tag="v$((major_slice + 1)).0.0"
              push_tag $new_tag
              new_major_tag="v$((major_slice + 1))"
              push_tag $new_major_tag
              ;;
            *)
              echo "Please specify label, choose only ONE from: major, minor, patch."
              ;;
          esac

      - name: Print tags
        run: git ls-remote --tags origin
